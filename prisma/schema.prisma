generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MUNICIPALITY
  COMPANY
  ADMIN_MASTER
}

enum TypeGroup {
  SERVICE
  OPPORTUNITY
  CATEGORY
}

enum UnitType {
  UF
  MUNICIPALITY
}

enum EmploymentType {
  CLT
  PJ
  OTHERS
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  document String  @unique
  phone    String  @unique
  password String
  allowed  Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  role Role @default(MUNICIPALITY)

  municipality Municipality? @relation("UserMunicipality")
  company      Company?      @relation("UserCompany")

  @@map("users")
}

model Municipality {
  id                 String   @id @default(uuid())
  name               String
  guardInitialDate   DateTime
  guardCount         Int
  trafficInitialDate DateTime
  trafficCount       Int
  federativeUnit     String
  unitType           UnitType

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userId String @unique
  user   User   @relation("UserMunicipality", fields: [userId], references: [id])

  allocationDepartments AllocationDepartment[]
  maintenanceContracts  MaintenanceContract[]
  qualifiedStaff        QualifiedStaff[]
  projectsPartnerships  ProjectPartnership[]
  managements           Management[]
  Project               Project[]

  @@map("municipalities")
}

model AllocationDepartment {
  id          String @id @default(uuid())
  description String
  address     String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  requestedItems RequestedItem[]

  @@map("allocation_departments")
}

model MaintenanceContract {
  id          String @id @default(uuid())
  description String
  attachment  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  requestedItems RequestedItem[]

  @@map("maintenance_contracts")
}

model QualifiedStaff {
  id             String         @id @default(uuid())
  name           String
  sector         String
  education      String
  experience     String
  employmentType EmploymentType
  document       String
  isResponsible  Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  @@map("qualified_staffs")
}

model ProjectPartnership {
  id        String @id @default(uuid())
  term      String
  agency    String
  objective String
  status    String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  @@map("project_partnerships")
}

model Management {
  id          String   @id @default(uuid())
  initialDate DateTime
  endDate     DateTime

  managerName    String
  managerCpf     String
  managerEmail   String
  managerAddress String
  managerPhone   String

  adminManagerName    String
  adminManagerCpf     String
  adminManagerEmail   String
  adminManagerAddress String
  adminManagerPhone   String

  legislationName    String
  legislationCpf     String
  legislationEmail   String
  legislationAddress String
  legislationPhone   String

  municipalityId String
  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("managements")
}

model Company {
  id String @id @default(uuid())

  cnpj                 String @unique
  legalName            String
  tradeName            String
  address              String
  email                String @unique
  phone                String @unique
  site                 String
  portfolioDescription String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  userId String @unique
  user   User   @relation("UserCompany", fields: [userId], references: [id], onDelete: Cascade)

  specificProducts         SpecificProduct[]
  priceRegistrationRecords PriceRegistrationRecord[]

  @@map("companies")
}

model BaseProduct {
  id                   String   @id @default(uuid())
  code                 String   @unique
  name                 String
  technicalDescription String
  budget1              Decimal
  budget1Validity      DateTime
  budget2              Decimal
  budget2Validity      DateTime
  budget3              Decimal
  budget3Validity      DateTime
  unitValue            Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  type   Type   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId String

  specificProducts       SpecificProduct[]
  requestedItems         RequestedItem[]
  OpportunityBaseProduct OpportunityBaseProduct[]

  @@map("base_products")
}

model SpecificProduct {
  id             String   @id @default(uuid())
  brand          String
  model          String
  description    String
  unitValue      Decimal
  warrantyMonths Int
  budget         Decimal
  budgetValidity DateTime

  baseProduct   BaseProduct @relation(fields: [baseProductId], references: [id], onDelete: Cascade)
  baseProductId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  priceRegistrationRecordItems PriceRegistrationRecordItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("specific_products")
}

model PriceRegistrationRecord {
  id            String   @id @default(uuid())
  publicAgency  String
  number        String   @unique
  year          Int
  effectiveDate DateTime
  status        String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?

  priceRegistrationRecordItems PriceRegistrationRecordItem[]

  @@map("price_registration_records")
}

model PriceRegistrationRecordItem {
  id                   String  @id @default(uuid())
  unitValue            Decimal
  quantity             Int
  minAdherenceQuantity Int
  maxAdherenceQuantity Int

  priceRegistrationRecordId String
  priceRegistrationRecord   PriceRegistrationRecord @relation(fields: [priceRegistrationRecordId], references: [id], onDelete: Cascade)

  specificProductId String
  specificProduct   SpecificProduct @relation(fields: [specificProductId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("price_registration_record_items")
}

model RequestedItem {
  id       String  @id @default(uuid())
  quantity Decimal
  budget   Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  baseProduct   BaseProduct @relation(fields: [baseProductId], references: [id], onDelete: Cascade)
  baseProductId String

  allocationDepartment   AllocationDepartment? @relation(fields: [allocationDepartmentId], references: [id], onDelete: Cascade)
  allocationDepartmentId String?

  maintenanceContract   MaintenanceContract? @relation(fields: [maintenanceContractId], references: [id], onDelete: Cascade)
  maintenanceContractId String?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@map("requested_itens")
}

model OpportunityBaseProduct {
  id            String      @id @default(uuid())
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  baseProduct   BaseProduct @relation(fields: [baseProductId], references: [id], onDelete: Cascade)
  baseProductId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([opportunityId, baseProductId])
  @@map("opportunity_base_products")
}

model Type {
  id          String    @id @default(uuid())
  description String    @unique
  group       TypeGroup
  parentId    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  parent   Type?  @relation("TypeHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Type[] @relation("TypeHierarchy")

  opportunities Opportunity[]
  baseProducts  BaseProduct[]

  @@map("types")
}

model Opportunity {
  id                    String   @id @default(uuid()) @map("id")
  title                 String   @unique
  slug                  String   @unique
  responsibleAgency     String
  description           String
  availableValue        Decimal
  minValue              Decimal
  maxValue              Decimal
  initialDeadline       DateTime
  finalDeadline         DateTime
  requiresCounterpart   Boolean
  counterpartPercentage Decimal?
  isActive              Boolean  @default(true)
  releasedForAll        Boolean  @default(false)
  allBaseProducts       Boolean  @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  type   Type   @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId String

  requiredDocuments      RequiredDocument[]
  projects               Project[]
  documents              Document[]
  OpportunityProjectType OpportunityProjectType[]
  OpportunityBaseProduct OpportunityBaseProduct[]

  @@map("opportunities")
}

model Field {
  id       String   @id @default(uuid())
  name     String
  value    String?
  parentId String?
  ready    Boolean? @default(false)

  parent   Field?  @relation("FieldHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Field[] @relation("FieldHierarchy")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  document   Document @relation(fields: [documentId], references: [id])
  documentId String

  @@map("fields")
}

model Document {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id])
  opportunityId String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  projectType   ProjectType? @relation(fields: [projectTypeId], references: [id])
  projectTypeId String?

  fields Field[]

  @@map("documents")
}

model RequiredDocument {
  id          String @id @default(uuid())
  name        String
  description String
  model       String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String

  @@map("required_documents")
}

model ProjectType {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  projects               Project[]
  documents              Document[]
  OpportunityProjectType OpportunityProjectType[]

  @@map("project_types")
}

model OpportunityProjectType {
  id            String      @id @default(uuid())
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String
  projectType   ProjectType @relation(fields: [projectTypeId], references: [id], onDelete: Cascade)
  projectTypeId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([opportunityId, projectTypeId])
  @@map("opportunity_project_types")
}

model Project {
  id                            String   @id @default(uuid())
  title                         String
  responsibleCpf                String?
  responsibleName               String?
  responsibleEmail              String?
  responsiblePhone              String?
  counterpartCapitalItem        String?
  counterpartCapitalValue       Decimal?
  counterpartOperatingCostCode  String?
  counterpartOperatingCostValue Decimal?
  totalValue                    Decimal?
  requestedValue                Decimal?
  baseValue                     Decimal?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  projectType   ProjectType @relation(fields: [projectTypeId], references: [id], onDelete: Cascade)
  projectTypeId String

  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId String

  municipality   Municipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
  municipalityId String

  requestedItems RequestedItem[]
  documents      Document[]

  @@map("projects")
}
